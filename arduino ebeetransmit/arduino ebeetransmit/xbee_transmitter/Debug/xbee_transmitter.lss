
xbee_transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  000011a6  0000123a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  00800224  00800224  0000125e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000125e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000aada  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023f1  00000000  00000000  0000c0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002051  00000000  00000000  0000e4db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  0001052c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000027ff  00000000  00000000  00010e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037c7  00000000  00000000  00013683  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00016e4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	16 c1       	rjmp	.+556    	; 0x22e <__dtors_end>
       2:	00 00       	nop
       4:	42 c1       	rjmp	.+644    	; 0x28a <__bad_interrupt>
       6:	00 00       	nop
       8:	40 c1       	rjmp	.+640    	; 0x28a <__bad_interrupt>
       a:	00 00       	nop
       c:	3e c1       	rjmp	.+636    	; 0x28a <__bad_interrupt>
       e:	00 00       	nop
      10:	3c c1       	rjmp	.+632    	; 0x28a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c1       	rjmp	.+628    	; 0x28a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c1       	rjmp	.+624    	; 0x28a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	36 c1       	rjmp	.+620    	; 0x28a <__bad_interrupt>
      1e:	00 00       	nop
      20:	34 c1       	rjmp	.+616    	; 0x28a <__bad_interrupt>
      22:	00 00       	nop
      24:	cf c5       	rjmp	.+2974   	; 0xbc4 <__vector_10>
      26:	00 00       	nop
      28:	cd c5       	rjmp	.+2970   	; 0xbc4 <__vector_10>
      2a:	00 00       	nop
      2c:	cb c5       	rjmp	.+2966   	; 0xbc4 <__vector_10>
      2e:	00 00       	nop
      30:	2c c1       	rjmp	.+600    	; 0x28a <__bad_interrupt>
      32:	00 00       	nop
      34:	2a c1       	rjmp	.+596    	; 0x28a <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c1       	rjmp	.+592    	; 0x28a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c1       	rjmp	.+588    	; 0x28a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c1       	rjmp	.+584    	; 0x28a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c1       	rjmp	.+580    	; 0x28a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c1       	rjmp	.+576    	; 0x28a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c1       	rjmp	.+572    	; 0x28a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c1       	rjmp	.+568    	; 0x28a <__bad_interrupt>
      52:	00 00       	nop
      54:	1a c1       	rjmp	.+564    	; 0x28a <__bad_interrupt>
      56:	00 00       	nop
      58:	18 c1       	rjmp	.+560    	; 0x28a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	28 c4       	rjmp	.+2128   	; 0x8ae <__vector_23>
      5e:	00 00       	nop
      60:	14 c1       	rjmp	.+552    	; 0x28a <__bad_interrupt>
      62:	00 00       	nop
      64:	ac c2       	rjmp	.+1368   	; 0x5be <__vector_25>
      66:	00 00       	nop
      68:	e0 c2       	rjmp	.+1472   	; 0x62a <__vector_26>
      6a:	00 00       	nop
      6c:	0e c1       	rjmp	.+540    	; 0x28a <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c c1       	rjmp	.+536    	; 0x28a <__bad_interrupt>
      72:	00 00       	nop
      74:	0a c1       	rjmp	.+532    	; 0x28a <__bad_interrupt>
      76:	00 00       	nop
      78:	08 c1       	rjmp	.+528    	; 0x28a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	06 c1       	rjmp	.+524    	; 0x28a <__bad_interrupt>
      7e:	00 00       	nop
      80:	04 c1       	rjmp	.+520    	; 0x28a <__bad_interrupt>
      82:	00 00       	nop
      84:	02 c1       	rjmp	.+516    	; 0x28a <__bad_interrupt>
      86:	00 00       	nop
      88:	00 c1       	rjmp	.+512    	; 0x28a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fe c0       	rjmp	.+508    	; 0x28a <__bad_interrupt>
      8e:	00 00       	nop
      90:	fc c0       	rjmp	.+504    	; 0x28a <__bad_interrupt>
      92:	00 00       	nop
      94:	fa c0       	rjmp	.+500    	; 0x28a <__bad_interrupt>
      96:	00 00       	nop
      98:	f8 c0       	rjmp	.+496    	; 0x28a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f6 c0       	rjmp	.+492    	; 0x28a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f4 c0       	rjmp	.+488    	; 0x28a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f2 c0       	rjmp	.+484    	; 0x28a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f0 c0       	rjmp	.+480    	; 0x28a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ee c0       	rjmp	.+476    	; 0x28a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ec c0       	rjmp	.+472    	; 0x28a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ea c0       	rjmp	.+468    	; 0x28a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e8 c0       	rjmp	.+464    	; 0x28a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e6 c0       	rjmp	.+460    	; 0x28a <__bad_interrupt>
      be:	00 00       	nop
      c0:	e4 c0       	rjmp	.+456    	; 0x28a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e2 c0       	rjmp	.+452    	; 0x28a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e0 c0       	rjmp	.+448    	; 0x28a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	de c0       	rjmp	.+444    	; 0x28a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	dc c0       	rjmp	.+440    	; 0x28a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	da c0       	rjmp	.+436    	; 0x28a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d8 c0       	rjmp	.+432    	; 0x28a <__bad_interrupt>
      da:	00 00       	nop
      dc:	d6 c0       	rjmp	.+428    	; 0x28a <__bad_interrupt>
      de:	00 00       	nop
      e0:	d4 c0       	rjmp	.+424    	; 0x28a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 07       	cpc	r27, r16
      e6:	b3 07       	cpc	r27, r19
      e8:	a2 07       	cpc	r26, r18
      ea:	a6 07       	cpc	r26, r22
      ec:	ac 07       	cpc	r26, r28
      ee:	ea 07       	cpc	r30, r26
      f0:	b7 07       	cpc	r27, r23
      f2:	bb 07       	cpc	r27, r27
      f4:	c1 07       	cpc	r28, r17
      f6:	c5 07       	cpc	r28, r21
      f8:	c9 07       	cpc	r28, r25
      fa:	cf 07       	cpc	r28, r31
      fc:	d3 07       	cpc	r29, r19
      fe:	d7 07       	cpc	r29, r23
     100:	ea 07       	cpc	r30, r26
     102:	dd 07       	cpc	r29, r29
     104:	e1 07       	cpc	r30, r17
     106:	e5 07       	cpc	r30, r21

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	68 01       	movw	r12, r16
     22a:	47 03       	mulsu	r20, r23

0000022c <__ctors_end>:
     22c:	6e 01       	movw	r12, r28

0000022e <__dtors_end>:
     22e:	11 24       	eor	r1, r1
     230:	1f be       	out	0x3f, r1	; 63
     232:	cf ef       	ldi	r28, 0xFF	; 255
     234:	d1 e2       	ldi	r29, 0x21	; 33
     236:	de bf       	out	0x3e, r29	; 62
     238:	cd bf       	out	0x3d, r28	; 61
     23a:	00 e0       	ldi	r16, 0x00	; 0
     23c:	0c bf       	out	0x3c, r16	; 60

0000023e <__do_copy_data>:
     23e:	12 e0       	ldi	r17, 0x02	; 2
     240:	a0 e0       	ldi	r26, 0x00	; 0
     242:	b2 e0       	ldi	r27, 0x02	; 2
     244:	e6 ea       	ldi	r30, 0xA6	; 166
     246:	f1 e1       	ldi	r31, 0x11	; 17
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	0b bf       	out	0x3b, r16	; 59
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x14>
     24e:	07 90       	elpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a4 32       	cpi	r26, 0x24	; 36
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0x10>

00000258 <__do_clear_bss>:
     258:	23 e0       	ldi	r18, 0x03	; 3
     25a:	a4 e2       	ldi	r26, 0x24	; 36
     25c:	b2 e0       	ldi	r27, 0x02	; 2
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	af 32       	cpi	r26, 0x2F	; 47
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>

00000268 <__do_global_ctors>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	c6 e1       	ldi	r28, 0x16	; 22
     26c:	d1 e0       	ldi	r29, 0x01	; 1
     26e:	00 e0       	ldi	r16, 0x00	; 0
     270:	05 c0       	rjmp	.+10     	; 0x27c <__do_global_ctors+0x14>
     272:	21 97       	sbiw	r28, 0x01	; 1
     274:	01 09       	sbc	r16, r1
     276:	80 2f       	mov	r24, r16
     278:	fe 01       	movw	r30, r28
     27a:	68 d7       	rcall	.+3792   	; 0x114c <__tablejump2__>
     27c:	c4 31       	cpi	r28, 0x14	; 20
     27e:	d1 07       	cpc	r29, r17
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 07       	cpc	r16, r24
     284:	b1 f7       	brne	.-20     	; 0x272 <__do_global_ctors+0xa>
     286:	31 d2       	rcall	.+1122   	; 0x6ea <main>
     288:	7d c7       	rjmp	.+3834   	; 0x1184 <__do_global_dtors>

0000028a <__bad_interrupt>:
     28a:	ba ce       	rjmp	.-652    	; 0x0 <__vectors>

0000028c <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     28c:	26 e0       	ldi	r18, 0x06	; 6
     28e:	40 e8       	ldi	r20, 0x80	; 128
     290:	55 e2       	ldi	r21, 0x25	; 37
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	85 e4       	ldi	r24, 0x45	; 69
     298:	92 e0       	ldi	r25, 0x02	; 2
     29a:	2b d1       	rcall	.+598    	; 0x4f2 <_ZN14HardwareSerial5beginEmh>
int value ; //Value from pot

void setup() {
  //Start the serial communication
  Serial.begin(9600); //Baud rate must be the same as is on xBee module
  xbeetra.begin(115200);
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	52 ec       	ldi	r21, 0xC2	; 194
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	86 e2       	ldi	r24, 0x26	; 38
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	88 c5       	rjmp	.+2832   	; 0xdba <_ZN14SoftwareSerial5beginEl>

000002aa <loop>:
 
}

void loop()
{    
xbeetra.print(value);
     2aa:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__data_end>
     2ae:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__data_end+0x1>
     2b2:	4a e0       	ldi	r20, 0x0A	; 10
     2b4:	50 e0       	ldi	r21, 0x00	; 0
     2b6:	86 e2       	ldi	r24, 0x26	; 38
     2b8:	92 e0       	ldi	r25, 0x02	; 2
     2ba:	f3 d2       	rcall	.+1510   	; 0x8a2 <_ZN5Print5printEii>
value++;
     2bc:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     2c0:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__data_end+0x1>
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <__data_end+0x1>
     2ca:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
     2ce:	08 95       	ret

000002d0 <_GLOBAL__sub_I_xbeetra>:
#include <SoftwareSerial.h>
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio


SoftwareSerial xbeetra(23,24);  //rx,tx
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	48 e1       	ldi	r20, 0x18	; 24
     2d4:	67 e1       	ldi	r22, 0x17	; 23
     2d6:	86 e2       	ldi	r24, 0x26	; 38
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	46 c5       	rjmp	.+2700   	; 0xd68 <_ZN14SoftwareSerialC1Ehhb>

000002dc <_GLOBAL__sub_D_xbeetra>:
     2dc:	86 e2       	ldi	r24, 0x26	; 38
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	ef c4       	rjmp	.+2526   	; 0xcc0 <_ZN14SoftwareSerialD1Ev>

000002e2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     2e2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     2e4:	91 8d       	ldd	r25, Z+25	; 0x19
     2e6:	22 8d       	ldd	r18, Z+26	; 0x1a
     2e8:	89 2f       	mov	r24, r25
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	80 5c       	subi	r24, 0xC0	; 192
     2ee:	9f 4f       	sbci	r25, 0xFF	; 255
     2f0:	82 1b       	sub	r24, r18
     2f2:	91 09       	sbc	r25, r1
}
     2f4:	8f 73       	andi	r24, 0x3F	; 63
     2f6:	99 27       	eor	r25, r25
     2f8:	08 95       	ret

000002fa <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     2fa:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     2fc:	91 8d       	ldd	r25, Z+25	; 0x19
     2fe:	82 8d       	ldd	r24, Z+26	; 0x1a
     300:	98 17       	cp	r25, r24
     302:	31 f0       	breq	.+12     	; 0x310 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     304:	82 8d       	ldd	r24, Z+26	; 0x1a
     306:	e8 0f       	add	r30, r24
     308:	f1 1d       	adc	r31, r1
     30a:	85 8d       	ldd	r24, Z+29	; 0x1d
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     310:	8f ef       	ldi	r24, 0xFF	; 255
     312:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     314:	08 95       	ret

00000316 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     316:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     318:	91 8d       	ldd	r25, Z+25	; 0x19
     31a:	82 8d       	ldd	r24, Z+26	; 0x1a
     31c:	98 17       	cp	r25, r24
     31e:	61 f0       	breq	.+24     	; 0x338 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     320:	82 8d       	ldd	r24, Z+26	; 0x1a
     322:	df 01       	movw	r26, r30
     324:	a8 0f       	add	r26, r24
     326:	b1 1d       	adc	r27, r1
     328:	5d 96       	adiw	r26, 0x1d	; 29
     32a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     32c:	92 8d       	ldd	r25, Z+26	; 0x1a
     32e:	9f 5f       	subi	r25, 0xFF	; 255
     330:	9f 73       	andi	r25, 0x3F	; 63
     332:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     33c:	08 95       	ret

0000033e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     33e:	fc 01       	movw	r30, r24
     340:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     342:	44 8d       	ldd	r20, Z+28	; 0x1c
     344:	25 2f       	mov	r18, r21
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	84 2f       	mov	r24, r20
     34a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     34c:	82 1b       	sub	r24, r18
     34e:	93 0b       	sbc	r25, r19
     350:	54 17       	cp	r21, r20
     352:	10 f0       	brcs	.+4      	; 0x358 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     354:	cf 96       	adiw	r24, 0x3f	; 63
     356:	08 95       	ret
  return tail - head - 1;
     358:	01 97       	sbiw	r24, 0x01	; 1
}
     35a:	08 95       	ret

0000035c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     35c:	8e e3       	ldi	r24, 0x3E	; 62
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	89 2b       	or	r24, r25
     362:	39 f0       	breq	.+14     	; 0x372 <_Z14serialEventRunv+0x16>
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	89 2b       	or	r24, r25
     36a:	19 f0       	breq	.+6      	; 0x372 <_Z14serialEventRunv+0x16>
     36c:	87 d1       	rcall	.+782    	; 0x67c <_Z17Serial0_availablev>
     36e:	81 11       	cpse	r24, r1
     370:	25 c0       	rjmp	.+74     	; 0x3bc <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	89 2b       	or	r24, r25
     378:	41 f0       	breq	.+16     	; 0x38a <_Z14serialEventRunv+0x2e>
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	89 2b       	or	r24, r25
     380:	21 f0       	breq	.+8      	; 0x38a <_Z14serialEventRunv+0x2e>
     382:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     386:	81 11       	cpse	r24, r1
     388:	1c c0       	rjmp	.+56     	; 0x3c2 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	89 2b       	or	r24, r25
     390:	41 f0       	breq	.+16     	; 0x3a2 <_Z14serialEventRunv+0x46>
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	89 2b       	or	r24, r25
     398:	21 f0       	breq	.+8      	; 0x3a2 <_Z14serialEventRunv+0x46>
     39a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     39e:	81 11       	cpse	r24, r1
     3a0:	13 c0       	rjmp	.+38     	; 0x3c8 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	89 2b       	or	r24, r25
     3a8:	a1 f0       	breq	.+40     	; 0x3d2 <_Z14serialEventRunv+0x76>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	89 2b       	or	r24, r25
     3b0:	81 f0       	breq	.+32     	; 0x3d2 <_Z14serialEventRunv+0x76>
     3b2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     3b6:	81 11       	cpse	r24, r1
     3b8:	0a c0       	rjmp	.+20     	; 0x3ce <_Z14serialEventRunv+0x72>
     3ba:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     3bc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     3c0:	d8 cf       	rjmp	.-80     	; 0x372 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     3c2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     3c6:	e1 cf       	rjmp	.-62     	; 0x38a <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     3c8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     3cc:	ea cf       	rjmp	.-44     	; 0x3a2 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     3ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     3d2:	08 95       	ret

000003d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     3d4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     3d6:	84 8d       	ldd	r24, Z+28	; 0x1c
     3d8:	df 01       	movw	r26, r30
     3da:	a8 0f       	add	r26, r24
     3dc:	b1 1d       	adc	r27, r1
     3de:	a3 5a       	subi	r26, 0xA3	; 163
     3e0:	bf 4f       	sbci	r27, 0xFF	; 255
     3e2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     3e4:	84 8d       	ldd	r24, Z+28	; 0x1c
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	8f 73       	andi	r24, 0x3F	; 63
     3ec:	99 27       	eor	r25, r25
     3ee:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     3f0:	a6 89       	ldd	r26, Z+22	; 0x16
     3f2:	b7 89       	ldd	r27, Z+23	; 0x17
     3f4:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3f6:	a0 89       	ldd	r26, Z+16	; 0x10
     3f8:	b1 89       	ldd	r27, Z+17	; 0x11
     3fa:	8c 91       	ld	r24, X
     3fc:	83 70       	andi	r24, 0x03	; 3
     3fe:	80 64       	ori	r24, 0x40	; 64
     400:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     402:	93 8d       	ldd	r25, Z+27	; 0x1b
     404:	84 8d       	ldd	r24, Z+28	; 0x1c
     406:	98 13       	cpse	r25, r24
     408:	06 c0       	rjmp	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     40a:	02 88       	ldd	r0, Z+18	; 0x12
     40c:	f3 89       	ldd	r31, Z+19	; 0x13
     40e:	e0 2d       	mov	r30, r0
     410:	80 81       	ld	r24, Z
     412:	8f 7d       	andi	r24, 0xDF	; 223
     414:	80 83       	st	Z, r24
     416:	08 95       	ret

00000418 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     418:	ef 92       	push	r14
     41a:	ff 92       	push	r15
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
  _written = true;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     42a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     42c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     42e:	98 13       	cpse	r25, r24
     430:	05 c0       	rjmp	.+10     	; 0x43c <_ZN14HardwareSerial5writeEh+0x24>
     432:	e8 89       	ldd	r30, Y+16	; 0x10
     434:	f9 89       	ldd	r31, Y+17	; 0x11
     436:	80 81       	ld	r24, Z
     438:	85 fd       	sbrc	r24, 5
     43a:	25 c0       	rjmp	.+74     	; 0x486 <_ZN14HardwareSerial5writeEh+0x6e>
     43c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     43e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     440:	10 e0       	ldi	r17, 0x00	; 0
     442:	0f 5f       	subi	r16, 0xFF	; 255
     444:	1f 4f       	sbci	r17, 0xFF	; 255
     446:	0f 73       	andi	r16, 0x3F	; 63
     448:	11 27       	eor	r17, r17
     44a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     44c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     44e:	e8 12       	cpse	r14, r24
     450:	0b c0       	rjmp	.+22     	; 0x468 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	07 fc       	sbrc	r0, 7
     456:	fa cf       	rjmp	.-12     	; 0x44c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     458:	e8 89       	ldd	r30, Y+16	; 0x10
     45a:	f9 89       	ldd	r31, Y+17	; 0x11
     45c:	80 81       	ld	r24, Z
     45e:	85 ff       	sbrs	r24, 5
     460:	f5 cf       	rjmp	.-22     	; 0x44c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     462:	ce 01       	movw	r24, r28
     464:	b7 df       	rcall	.-146    	; 0x3d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     466:	f2 cf       	rjmp	.-28     	; 0x44c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     468:	8b 8d       	ldd	r24, Y+27	; 0x1b
     46a:	fe 01       	movw	r30, r28
     46c:	e8 0f       	add	r30, r24
     46e:	f1 1d       	adc	r31, r1
     470:	e3 5a       	subi	r30, 0xA3	; 163
     472:	ff 4f       	sbci	r31, 0xFF	; 255
     474:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     476:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     478:	f8 94       	cli
    _tx_buffer_head = i;
     47a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     47c:	ea 89       	ldd	r30, Y+18	; 0x12
     47e:	fb 89       	ldd	r31, Y+19	; 0x13
     480:	80 81       	ld	r24, Z
     482:	80 62       	ori	r24, 0x20	; 32
     484:	0a c0       	rjmp	.+20     	; 0x49a <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     486:	9f b7       	in	r25, 0x3f	; 63
     488:	f8 94       	cli
      *_udr = c;
     48a:	ee 89       	ldd	r30, Y+22	; 0x16
     48c:	ff 89       	ldd	r31, Y+23	; 0x17
     48e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     490:	e8 89       	ldd	r30, Y+16	; 0x10
     492:	f9 89       	ldd	r31, Y+17	; 0x11
     494:	80 81       	ld	r24, Z
     496:	83 70       	andi	r24, 0x03	; 3
     498:	80 64       	ori	r24, 0x40	; 64
     49a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     49c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	08 95       	ret

000004b0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     4b6:	88 8d       	ldd	r24, Y+24	; 0x18
     4b8:	88 23       	and	r24, r24
     4ba:	c1 f0       	breq	.+48     	; 0x4ec <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     4bc:	ea 89       	ldd	r30, Y+18	; 0x12
     4be:	fb 89       	ldd	r31, Y+19	; 0x13
     4c0:	80 81       	ld	r24, Z
     4c2:	85 fd       	sbrc	r24, 5
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <_ZN14HardwareSerial5flushEv+0x20>
     4c6:	a8 89       	ldd	r26, Y+16	; 0x10
     4c8:	b9 89       	ldd	r27, Y+17	; 0x11
     4ca:	8c 91       	ld	r24, X
     4cc:	86 fd       	sbrc	r24, 6
     4ce:	0e c0       	rjmp	.+28     	; 0x4ec <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	07 fc       	sbrc	r0, 7
     4d4:	f5 cf       	rjmp	.-22     	; 0x4c0 <_ZN14HardwareSerial5flushEv+0x10>
     4d6:	80 81       	ld	r24, Z
     4d8:	85 ff       	sbrs	r24, 5
     4da:	f2 cf       	rjmp	.-28     	; 0x4c0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     4dc:	a8 89       	ldd	r26, Y+16	; 0x10
     4de:	b9 89       	ldd	r27, Y+17	; 0x11
     4e0:	8c 91       	ld	r24, X
     4e2:	85 ff       	sbrs	r24, 5
     4e4:	ed cf       	rjmp	.-38     	; 0x4c0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     4e6:	ce 01       	movw	r24, r28
     4e8:	75 df       	rcall	.-278    	; 0x3d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     4ea:	e8 cf       	rjmp	.-48     	; 0x4bc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ec 01       	movw	r28, r24
     502:	6a 01       	movw	r12, r20
     504:	7b 01       	movw	r14, r22
     506:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     508:	e8 89       	ldd	r30, Y+16	; 0x10
     50a:	f9 89       	ldd	r31, Y+17	; 0x11
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     510:	41 15       	cp	r20, r1
     512:	51 4e       	sbci	r21, 0xE1	; 225
     514:	61 05       	cpc	r22, r1
     516:	71 05       	cpc	r23, r1
     518:	a9 f0       	breq	.+42     	; 0x544 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	79 e0       	ldi	r23, 0x09	; 9
     51e:	8d e3       	ldi	r24, 0x3D	; 61
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a7 01       	movw	r20, r14
     524:	96 01       	movw	r18, r12
     526:	d4 d5       	rcall	.+2984   	; 0x10d0 <__udivmodsi4>
     528:	da 01       	movw	r26, r20
     52a:	c9 01       	movw	r24, r18
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	a1 09       	sbc	r26, r1
     530:	b1 09       	sbc	r27, r1
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     53c:	21 15       	cp	r18, r1
     53e:	80 e1       	ldi	r24, 0x10	; 16
     540:	38 07       	cpc	r19, r24
     542:	a0 f0       	brcs	.+40     	; 0x56c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     544:	e8 89       	ldd	r30, Y+16	; 0x10
     546:	f9 89       	ldd	r31, Y+17	; 0x11
     548:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     54a:	60 e8       	ldi	r22, 0x80	; 128
     54c:	74 e8       	ldi	r23, 0x84	; 132
     54e:	8e e1       	ldi	r24, 0x1E	; 30
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	a7 01       	movw	r20, r14
     554:	96 01       	movw	r18, r12
     556:	bc d5       	rcall	.+2936   	; 0x10d0 <__udivmodsi4>
     558:	da 01       	movw	r26, r20
     55a:	c9 01       	movw	r24, r18
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	a1 09       	sbc	r26, r1
     560:	b1 09       	sbc	r27, r1
     562:	b6 95       	lsr	r27
     564:	a7 95       	ror	r26
     566:	97 95       	ror	r25
     568:	87 95       	ror	r24
     56a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     56c:	ec 85       	ldd	r30, Y+12	; 0x0c
     56e:	fd 85       	ldd	r31, Y+13	; 0x0d
     570:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     572:	ee 85       	ldd	r30, Y+14	; 0x0e
     574:	ff 85       	ldd	r31, Y+15	; 0x0f
     576:	20 83       	st	Z, r18

  _written = false;
     578:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     57a:	ec 89       	ldd	r30, Y+20	; 0x14
     57c:	fd 89       	ldd	r31, Y+21	; 0x15
     57e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     580:	ea 89       	ldd	r30, Y+18	; 0x12
     582:	fb 89       	ldd	r31, Y+19	; 0x13
     584:	80 81       	ld	r24, Z
     586:	80 61       	ori	r24, 0x10	; 16
     588:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     58a:	ea 89       	ldd	r30, Y+18	; 0x12
     58c:	fb 89       	ldd	r31, Y+19	; 0x13
     58e:	80 81       	ld	r24, Z
     590:	88 60       	ori	r24, 0x08	; 8
     592:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     594:	ea 89       	ldd	r30, Y+18	; 0x12
     596:	fb 89       	ldd	r31, Y+19	; 0x13
     598:	80 81       	ld	r24, Z
     59a:	80 68       	ori	r24, 0x80	; 128
     59c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     59e:	ea 89       	ldd	r30, Y+18	; 0x12
     5a0:	fb 89       	ldd	r31, Y+19	; 0x13
     5a2:	80 81       	ld	r24, Z
     5a4:	8f 7d       	andi	r24, 0xDF	; 223
     5a6:	80 83       	st	Z, r24
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	08 95       	ret

000005b8 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	08 95       	ret

000005be <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     5be:	1f 92       	push	r1
     5c0:	0f 92       	push	r0
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	0f 92       	push	r0
     5c6:	11 24       	eor	r1, r1
     5c8:	0b b6       	in	r0, 0x3b	; 59
     5ca:	0f 92       	push	r0
     5cc:	2f 93       	push	r18
     5ce:	8f 93       	push	r24
     5d0:	9f 93       	push	r25
     5d2:	ef 93       	push	r30
     5d4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     5d6:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <Serial+0x10>
     5da:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <Serial+0x11>
     5de:	80 81       	ld	r24, Z
     5e0:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <Serial+0x16>
     5e4:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <Serial+0x17>
     5e8:	82 fd       	sbrc	r24, 2
     5ea:	12 c0       	rjmp	.+36     	; 0x610 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     5ec:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     5ee:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <Serial+0x19>
     5f2:	8f 5f       	subi	r24, 0xFF	; 255
     5f4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     5f6:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <Serial+0x1a>
     5fa:	82 17       	cp	r24, r18
     5fc:	51 f0       	breq	.+20     	; 0x612 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     5fe:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <Serial+0x19>
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	eb 5b       	subi	r30, 0xBB	; 187
     606:	fd 4f       	sbci	r31, 0xFD	; 253
     608:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     60a:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <Serial+0x19>
     60e:	01 c0       	rjmp	.+2      	; 0x612 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     610:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	9f 91       	pop	r25
     618:	8f 91       	pop	r24
     61a:	2f 91       	pop	r18
     61c:	0f 90       	pop	r0
     61e:	0b be       	out	0x3b, r0	; 59
     620:	0f 90       	pop	r0
     622:	0f be       	out	0x3f, r0	; 63
     624:	0f 90       	pop	r0
     626:	1f 90       	pop	r1
     628:	18 95       	reti

0000062a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     62a:	1f 92       	push	r1
     62c:	0f 92       	push	r0
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	0f 92       	push	r0
     632:	11 24       	eor	r1, r1
     634:	0b b6       	in	r0, 0x3b	; 59
     636:	0f 92       	push	r0
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     650:	85 e4       	ldi	r24, 0x45	; 69
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	bf de       	rcall	.-642    	; 0x3d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     656:	ff 91       	pop	r31
     658:	ef 91       	pop	r30
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	7f 91       	pop	r23
     664:	6f 91       	pop	r22
     666:	5f 91       	pop	r21
     668:	4f 91       	pop	r20
     66a:	3f 91       	pop	r19
     66c:	2f 91       	pop	r18
     66e:	0f 90       	pop	r0
     670:	0b be       	out	0x3b, r0	; 59
     672:	0f 90       	pop	r0
     674:	0f be       	out	0x3f, r0	; 63
     676:	0f 90       	pop	r0
     678:	1f 90       	pop	r1
     67a:	18 95       	reti

0000067c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     67c:	85 e4       	ldi	r24, 0x45	; 69
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	30 de       	rcall	.-928    	; 0x2e2 <_ZN14HardwareSerial9availableEv>
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	89 2b       	or	r24, r25
     686:	09 f4       	brne	.+2      	; 0x68a <_Z17Serial0_availablev+0xe>
     688:	20 e0       	ldi	r18, 0x00	; 0
}
     68a:	82 2f       	mov	r24, r18
     68c:	08 95       	ret

0000068e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     68e:	e5 e4       	ldi	r30, 0x45	; 69
     690:	f2 e0       	ldi	r31, 0x02	; 2
     692:	13 82       	std	Z+3, r1	; 0x03
     694:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     696:	88 ee       	ldi	r24, 0xE8	; 232
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	a0 e0       	ldi	r26, 0x00	; 0
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	84 83       	std	Z+4, r24	; 0x04
     6a0:	95 83       	std	Z+5, r25	; 0x05
     6a2:	a6 83       	std	Z+6, r26	; 0x06
     6a4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
     6ae:	85 ec       	ldi	r24, 0xC5	; 197
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	95 87       	std	Z+13, r25	; 0x0d
     6b4:	84 87       	std	Z+12, r24	; 0x0c
     6b6:	84 ec       	ldi	r24, 0xC4	; 196
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	97 87       	std	Z+15, r25	; 0x0f
     6bc:	86 87       	std	Z+14, r24	; 0x0e
     6be:	80 ec       	ldi	r24, 0xC0	; 192
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	91 8b       	std	Z+17, r25	; 0x11
     6c4:	80 8b       	std	Z+16, r24	; 0x10
     6c6:	81 ec       	ldi	r24, 0xC1	; 193
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	93 8b       	std	Z+19, r25	; 0x13
     6cc:	82 8b       	std	Z+18, r24	; 0x12
     6ce:	82 ec       	ldi	r24, 0xC2	; 194
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	95 8b       	std	Z+21, r25	; 0x15
     6d4:	84 8b       	std	Z+20, r24	; 0x14
     6d6:	86 ec       	ldi	r24, 0xC6	; 198
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	97 8b       	std	Z+23, r25	; 0x17
     6dc:	86 8b       	std	Z+22, r24	; 0x16
     6de:	11 8e       	std	Z+25, r1	; 0x19
     6e0:	12 8e       	std	Z+26, r1	; 0x1a
     6e2:	13 8e       	std	Z+27, r1	; 0x1b
     6e4:	14 8e       	std	Z+28, r1	; 0x1c
     6e6:	08 95       	ret

000006e8 <initVariant>:
     6e8:	08 95       	ret

000006ea <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     6ea:	2b d1       	rcall	.+598    	; 0x942 <init>

	initVariant();
     6ec:	fd df       	rcall	.-6      	; 0x6e8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     6ee:	ce dd       	rcall	.-1124   	; 0x28c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     6f0:	ce ea       	ldi	r28, 0xAE	; 174
     6f2:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     6f4:	da dd       	rcall	.-1100   	; 0x2aa <loop>
		if (serialEventRun) serialEventRun();
     6f6:	20 97       	sbiw	r28, 0x00	; 0
     6f8:	e9 f3       	breq	.-6      	; 0x6f4 <main+0xa>
     6fa:	30 de       	rcall	.-928    	; 0x35c <_Z14serialEventRunv>
     6fc:	fb cf       	rjmp	.-10     	; 0x6f4 <main+0xa>

000006fe <_ZN5Print5writeEPKhj>:
     6fe:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	6c 01       	movw	r12, r24
     710:	7a 01       	movw	r14, r20
     712:	8b 01       	movw	r16, r22
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	ce 15       	cp	r28, r14
     71a:	df 05       	cpc	r29, r15
     71c:	81 f0       	breq	.+32     	; 0x73e <_ZN5Print5writeEPKhj+0x40>
     71e:	d8 01       	movw	r26, r16
     720:	6d 91       	ld	r22, X+
     722:	8d 01       	movw	r16, r26
     724:	d6 01       	movw	r26, r12
     726:	ed 91       	ld	r30, X+
     728:	fc 91       	ld	r31, X
     72a:	01 90       	ld	r0, Z+
     72c:	f0 81       	ld	r31, Z
     72e:	e0 2d       	mov	r30, r0
     730:	c6 01       	movw	r24, r12
     732:	19 95       	eicall
     734:	89 2b       	or	r24, r25
     736:	11 f0       	breq	.+4      	; 0x73c <_ZN5Print5writeEPKhj+0x3e>
     738:	21 96       	adiw	r28, 0x01	; 1
     73a:	ee cf       	rjmp	.-36     	; 0x718 <_ZN5Print5writeEPKhj+0x1a>
     73c:	7e 01       	movw	r14, r28
     73e:	c7 01       	movw	r24, r14
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	df 90       	pop	r13
     74e:	cf 90       	pop	r12
     750:	08 95       	ret

00000752 <_ZN5Print5writeEPKc>:
     752:	61 15       	cp	r22, r1
     754:	71 05       	cpc	r23, r1
     756:	79 f0       	breq	.+30     	; 0x776 <_ZN5Print5writeEPKc+0x24>
     758:	fb 01       	movw	r30, r22
     75a:	01 90       	ld	r0, Z+
     75c:	00 20       	and	r0, r0
     75e:	e9 f7       	brne	.-6      	; 0x75a <_ZN5Print5writeEPKc+0x8>
     760:	31 97       	sbiw	r30, 0x01	; 1
     762:	af 01       	movw	r20, r30
     764:	46 1b       	sub	r20, r22
     766:	57 0b       	sbc	r21, r23
     768:	dc 01       	movw	r26, r24
     76a:	ed 91       	ld	r30, X+
     76c:	fc 91       	ld	r31, X
     76e:	02 80       	ldd	r0, Z+2	; 0x02
     770:	f3 81       	ldd	r31, Z+3	; 0x03
     772:	e0 2d       	mov	r30, r0
     774:	19 94       	eijmp
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	08 95       	ret

0000077c <_ZN5Print5printEc>:
     77c:	dc 01       	movw	r26, r24
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	01 90       	ld	r0, Z+
     784:	f0 81       	ld	r31, Z
     786:	e0 2d       	mov	r30, r0
     788:	19 94       	eijmp

0000078a <_ZN5Print11printNumberEmh>:
     78a:	8f 92       	push	r8
     78c:	9f 92       	push	r9
     78e:	af 92       	push	r10
     790:	bf 92       	push	r11
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	a1 97       	sbiw	r28, 0x21	; 33
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	7c 01       	movw	r14, r24
     7b0:	fa 01       	movw	r30, r20
     7b2:	cb 01       	movw	r24, r22
     7b4:	19 a2       	std	Y+33, r1	; 0x21
     7b6:	22 30       	cpi	r18, 0x02	; 2
     7b8:	08 f4       	brcc	.+2      	; 0x7bc <_ZN5Print11printNumberEmh+0x32>
     7ba:	2a e0       	ldi	r18, 0x0A	; 10
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5d       	subi	r16, 0xDF	; 223
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	82 2e       	mov	r8, r18
     7c4:	91 2c       	mov	r9, r1
     7c6:	a1 2c       	mov	r10, r1
     7c8:	b1 2c       	mov	r11, r1
     7ca:	bf 01       	movw	r22, r30
     7cc:	a5 01       	movw	r20, r10
     7ce:	94 01       	movw	r18, r8
     7d0:	7f d4       	rcall	.+2302   	; 0x10d0 <__udivmodsi4>
     7d2:	f9 01       	movw	r30, r18
     7d4:	ca 01       	movw	r24, r20
     7d6:	01 50       	subi	r16, 0x01	; 1
     7d8:	11 09       	sbc	r17, r1
     7da:	6a 30       	cpi	r22, 0x0A	; 10
     7dc:	10 f4       	brcc	.+4      	; 0x7e2 <_ZN5Print11printNumberEmh+0x58>
     7de:	60 5d       	subi	r22, 0xD0	; 208
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <_ZN5Print11printNumberEmh+0x5a>
     7e2:	69 5c       	subi	r22, 0xC9	; 201
     7e4:	d8 01       	movw	r26, r16
     7e6:	6c 93       	st	X, r22
     7e8:	23 2b       	or	r18, r19
     7ea:	24 2b       	or	r18, r20
     7ec:	25 2b       	or	r18, r21
     7ee:	69 f7       	brne	.-38     	; 0x7ca <_ZN5Print11printNumberEmh+0x40>
     7f0:	b8 01       	movw	r22, r16
     7f2:	c7 01       	movw	r24, r14
     7f4:	ae df       	rcall	.-164    	; 0x752 <_ZN5Print5writeEPKc>
     7f6:	a1 96       	adiw	r28, 0x21	; 33
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	bf 90       	pop	r11
     810:	af 90       	pop	r10
     812:	9f 90       	pop	r9
     814:	8f 90       	pop	r8
     816:	08 95       	ret

00000818 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
  if (base == 0) {
     828:	21 15       	cp	r18, r1
     82a:	31 05       	cpc	r19, r1
     82c:	81 f4       	brne	.+32     	; 0x84e <_ZN5Print5printEli+0x36>
    return write(n);
     82e:	dc 01       	movw	r26, r24
     830:	ed 91       	ld	r30, X+
     832:	fc 91       	ld	r31, X
     834:	01 90       	ld	r0, Z+
     836:	f0 81       	ld	r31, Z
     838:	e0 2d       	mov	r30, r0
     83a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     84c:	19 94       	eijmp
  } else if (base == 10) {
     84e:	2a 30       	cpi	r18, 0x0A	; 10
     850:	31 05       	cpc	r19, r1
     852:	f1 f4       	brne	.+60     	; 0x890 <_ZN5Print5printEli+0x78>
    if (n < 0) {
     854:	77 ff       	sbrs	r23, 7
     856:	1b c0       	rjmp	.+54     	; 0x88e <_ZN5Print5printEli+0x76>
     858:	6a 01       	movw	r12, r20
     85a:	7b 01       	movw	r14, r22
     85c:	ec 01       	movw	r28, r24
      int t = print('-');
     85e:	6d e2       	ldi	r22, 0x2D	; 45
     860:	8d df       	rcall	.-230    	; 0x77c <_ZN5Print5printEc>
     862:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     864:	44 27       	eor	r20, r20
     866:	55 27       	eor	r21, r21
     868:	ba 01       	movw	r22, r20
     86a:	4c 19       	sub	r20, r12
     86c:	5d 09       	sbc	r21, r13
     86e:	6e 09       	sbc	r22, r14
     870:	7f 09       	sbc	r23, r15
     872:	2a e0       	ldi	r18, 0x0A	; 10
     874:	ce 01       	movw	r24, r28
     876:	89 df       	rcall	.-238    	; 0x78a <_ZN5Print11printNumberEmh>
     878:	80 0f       	add	r24, r16
     87a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     88e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	ff 90       	pop	r15
     89a:	ef 90       	pop	r14
     89c:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     89e:	cf 90       	pop	r12
     8a0:	74 cf       	rjmp	.-280    	; 0x78a <_ZN5Print11printNumberEmh>

000008a2 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     8a2:	9a 01       	movw	r18, r20
  return print((long) n, base);
     8a4:	ab 01       	movw	r20, r22
     8a6:	77 0f       	add	r23, r23
     8a8:	66 0b       	sbc	r22, r22
     8aa:	77 0b       	sbc	r23, r23
     8ac:	b5 cf       	rjmp	.-150    	; 0x818 <_ZN5Print5printEli>

000008ae <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	2f 93       	push	r18
     8ba:	3f 93       	push	r19
     8bc:	8f 93       	push	r24
     8be:	9f 93       	push	r25
     8c0:	af 93       	push	r26
     8c2:	bf 93       	push	r27
     8c4:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <timer0_millis>
     8c8:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <timer0_millis+0x1>
     8cc:	a0 91 e5 02 	lds	r26, 0x02E5	; 0x8002e5 <timer0_millis+0x2>
     8d0:	b0 91 e6 02 	lds	r27, 0x02E6	; 0x8002e6 <timer0_millis+0x3>
     8d4:	30 91 e2 02 	lds	r19, 0x02E2	; 0x8002e2 <timer0_fract>
     8d8:	23 e0       	ldi	r18, 0x03	; 3
     8da:	23 0f       	add	r18, r19
     8dc:	2d 37       	cpi	r18, 0x7D	; 125
     8de:	20 f4       	brcc	.+8      	; 0x8e8 <__vector_23+0x3a>
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	a1 1d       	adc	r26, r1
     8e4:	b1 1d       	adc	r27, r1
     8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <__vector_23+0x44>
     8e8:	26 e8       	ldi	r18, 0x86	; 134
     8ea:	23 0f       	add	r18, r19
     8ec:	02 96       	adiw	r24, 0x02	; 2
     8ee:	a1 1d       	adc	r26, r1
     8f0:	b1 1d       	adc	r27, r1
     8f2:	20 93 e2 02 	sts	0x02E2, r18	; 0x8002e2 <timer0_fract>
     8f6:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <timer0_millis>
     8fa:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <timer0_millis+0x1>
     8fe:	a0 93 e5 02 	sts	0x02E5, r26	; 0x8002e5 <timer0_millis+0x2>
     902:	b0 93 e6 02 	sts	0x02E6, r27	; 0x8002e6 <timer0_millis+0x3>
     906:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <timer0_overflow_count>
     90a:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <timer0_overflow_count+0x1>
     90e:	a0 91 e9 02 	lds	r26, 0x02E9	; 0x8002e9 <timer0_overflow_count+0x2>
     912:	b0 91 ea 02 	lds	r27, 0x02EA	; 0x8002ea <timer0_overflow_count+0x3>
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	a1 1d       	adc	r26, r1
     91a:	b1 1d       	adc	r27, r1
     91c:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <timer0_overflow_count>
     920:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <timer0_overflow_count+0x1>
     924:	a0 93 e9 02 	sts	0x02E9, r26	; 0x8002e9 <timer0_overflow_count+0x2>
     928:	b0 93 ea 02 	sts	0x02EA, r27	; 0x8002ea <timer0_overflow_count+0x3>
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti

00000942 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     942:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     944:	84 b5       	in	r24, 0x24	; 36
     946:	82 60       	ori	r24, 0x02	; 2
     948:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     94a:	84 b5       	in	r24, 0x24	; 36
     94c:	81 60       	ori	r24, 0x01	; 1
     94e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     950:	85 b5       	in	r24, 0x25	; 37
     952:	82 60       	ori	r24, 0x02	; 2
     954:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     956:	85 b5       	in	r24, 0x25	; 37
     958:	81 60       	ori	r24, 0x01	; 1
     95a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     95c:	ee e6       	ldi	r30, 0x6E	; 110
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	81 60       	ori	r24, 0x01	; 1
     964:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     966:	e1 e8       	ldi	r30, 0x81	; 129
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     96c:	80 81       	ld	r24, Z
     96e:	82 60       	ori	r24, 0x02	; 2
     970:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     972:	80 81       	ld	r24, Z
     974:	81 60       	ori	r24, 0x01	; 1
     976:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     978:	e0 e8       	ldi	r30, 0x80	; 128
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	81 60       	ori	r24, 0x01	; 1
     980:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     982:	e1 eb       	ldi	r30, 0xB1	; 177
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	84 60       	ori	r24, 0x04	; 4
     98a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     98c:	e0 eb       	ldi	r30, 0xB0	; 176
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	81 60       	ori	r24, 0x01	; 1
     994:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     996:	e1 e9       	ldi	r30, 0x91	; 145
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	82 60       	ori	r24, 0x02	; 2
     99e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     9a0:	80 81       	ld	r24, Z
     9a2:	81 60       	ori	r24, 0x01	; 1
     9a4:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     9a6:	e0 e9       	ldi	r30, 0x90	; 144
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	81 60       	ori	r24, 0x01	; 1
     9ae:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     9b0:	e1 ea       	ldi	r30, 0xA1	; 161
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	82 60       	ori	r24, 0x02	; 2
     9b8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     9ba:	80 81       	ld	r24, Z
     9bc:	81 60       	ori	r24, 0x01	; 1
     9be:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     9c0:	e0 ea       	ldi	r30, 0xA0	; 160
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	81 60       	ori	r24, 0x01	; 1
     9c8:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     9ca:	e1 e2       	ldi	r30, 0x21	; 33
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	80 81       	ld	r24, Z
     9d0:	82 60       	ori	r24, 0x02	; 2
     9d2:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     9d4:	80 81       	ld	r24, Z
     9d6:	81 60       	ori	r24, 0x01	; 1
     9d8:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     9da:	e0 e2       	ldi	r30, 0x20	; 32
     9dc:	f1 e0       	ldi	r31, 0x01	; 1
     9de:	80 81       	ld	r24, Z
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     9e4:	ea e7       	ldi	r30, 0x7A	; 122
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	84 60       	ori	r24, 0x04	; 4
     9ec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     9ee:	80 81       	ld	r24, Z
     9f0:	82 60       	ori	r24, 0x02	; 2
     9f2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     9f4:	80 81       	ld	r24, Z
     9f6:	81 60       	ori	r24, 0x01	; 1
     9f8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     9fa:	80 81       	ld	r24, Z
     9fc:	80 68       	ori	r24, 0x80	; 128
     9fe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     a00:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     a04:	08 95       	ret

00000a06 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     a06:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <_ZN14SoftwareSerial13active_objectE>
     a0a:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <_ZN14SoftwareSerial13active_objectE+0x1>
     a0e:	28 17       	cp	r18, r24
     a10:	39 07       	cpc	r19, r25
     a12:	b9 f4       	brne	.+46     	; 0xa42 <_ZN14SoftwareSerial4readEv+0x3c>
     a14:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     a18:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     a1c:	98 17       	cp	r25, r24
     a1e:	89 f0       	breq	.+34     	; 0xa42 <_ZN14SoftwareSerial4readEv+0x3c>
     a20:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	e3 51       	subi	r30, 0x13	; 19
     a28:	fd 4f       	sbci	r31, 0xFD	; 253
     a2a:	80 81       	ld	r24, Z
     a2c:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	2f 5f       	subi	r18, 0xFF	; 255
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	2f 73       	andi	r18, 0x3F	; 63
     a38:	33 27       	eor	r19, r19
     a3a:	20 93 eb 02 	sts	0x02EB, r18	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	08 95       	ret
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	9f ef       	ldi	r25, 0xFF	; 255
     a46:	08 95       	ret

00000a48 <_ZN14SoftwareSerial5writeEh>:
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	dc 01       	movw	r26, r24
     a50:	5c 96       	adiw	r26, 0x1c	; 28
     a52:	8d 91       	ld	r24, X+
     a54:	9c 91       	ld	r25, X
     a56:	5d 97       	sbiw	r26, 0x1d	; 29
     a58:	00 97       	sbiw	r24, 0x00	; 0
     a5a:	39 f4       	brne	.+14     	; 0xa6a <_ZN14SoftwareSerial5writeEh+0x22>
     a5c:	21 e0       	ldi	r18, 0x01	; 1
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	13 96       	adiw	r26, 0x03	; 3
     a62:	3c 93       	st	X, r19
     a64:	2e 93       	st	-X, r18
     a66:	12 97       	sbiw	r26, 0x02	; 2
     a68:	3b c0       	rjmp	.+118    	; 0xae0 <_ZN14SoftwareSerial5writeEh+0x98>
     a6a:	51 96       	adiw	r26, 0x11	; 17
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	52 97       	sbiw	r26, 0x12	; 18
     a72:	50 96       	adiw	r26, 0x10	; 16
     a74:	2c 91       	ld	r18, X
     a76:	50 97       	sbiw	r26, 0x10	; 16
     a78:	32 2f       	mov	r19, r18
     a7a:	30 95       	com	r19
     a7c:	1f b7       	in	r17, 0x3f	; 63
     a7e:	5e 96       	adiw	r26, 0x1e	; 30
     a80:	4c 91       	ld	r20, X
     a82:	5e 97       	sbiw	r26, 0x1e	; 30
     a84:	74 2f       	mov	r23, r20
     a86:	72 70       	andi	r23, 0x02	; 2
     a88:	41 fd       	sbrc	r20, 1
     a8a:	60 95       	com	r22
     a8c:	f8 94       	cli
     a8e:	40 81       	ld	r20, Z
     a90:	77 23       	and	r23, r23
     a92:	11 f0       	breq	.+4      	; 0xa98 <_ZN14SoftwareSerial5writeEh+0x50>
     a94:	42 2b       	or	r20, r18
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <_ZN14SoftwareSerial5writeEh+0x52>
     a98:	43 23       	and	r20, r19
     a9a:	40 83       	st	Z, r20
     a9c:	ec 01       	movw	r28, r24
     a9e:	21 97       	sbiw	r28, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <_ZN14SoftwareSerial5writeEh+0x56>
     aa2:	48 e0       	ldi	r20, 0x08	; 8
     aa4:	50 81       	ld	r21, Z
     aa6:	60 ff       	sbrs	r22, 0
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <_ZN14SoftwareSerial5writeEh+0x66>
     aaa:	52 2b       	or	r21, r18
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <_ZN14SoftwareSerial5writeEh+0x68>
     aae:	53 23       	and	r21, r19
     ab0:	50 83       	st	Z, r21
     ab2:	ec 01       	movw	r28, r24
     ab4:	21 97       	sbiw	r28, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <_ZN14SoftwareSerial5writeEh+0x6c>
     ab8:	66 95       	lsr	r22
     aba:	41 50       	subi	r20, 0x01	; 1
     abc:	99 f7       	brne	.-26     	; 0xaa4 <_ZN14SoftwareSerial5writeEh+0x5c>
     abe:	80 81       	ld	r24, Z
     ac0:	77 23       	and	r23, r23
     ac2:	19 f0       	breq	.+6      	; 0xaca <_ZN14SoftwareSerial5writeEh+0x82>
     ac4:	83 23       	and	r24, r19
     ac6:	80 83       	st	Z, r24
     ac8:	02 c0       	rjmp	.+4      	; 0xace <_ZN14SoftwareSerial5writeEh+0x86>
     aca:	28 2b       	or	r18, r24
     acc:	20 83       	st	Z, r18
     ace:	1f bf       	out	0x3f, r17	; 63
     ad0:	5c 96       	adiw	r26, 0x1c	; 28
     ad2:	8d 91       	ld	r24, X+
     ad4:	9c 91       	ld	r25, X
     ad6:	5d 97       	sbiw	r26, 0x1d	; 29
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <_ZN14SoftwareSerial5writeEh+0x90>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	08 95       	ret

00000ae8 <_ZN14SoftwareSerial5flushEv>:
     ae8:	08 95       	ret

00000aea <_ZN14SoftwareSerial4peekEv>:
     aea:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <_ZN14SoftwareSerial13active_objectE>
     aee:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <_ZN14SoftwareSerial13active_objectE+0x1>
     af2:	28 17       	cp	r18, r24
     af4:	39 07       	cpc	r19, r25
     af6:	71 f4       	brne	.+28     	; 0xb14 <_ZN14SoftwareSerial4peekEv+0x2a>
     af8:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     afc:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     b00:	98 17       	cp	r25, r24
     b02:	41 f0       	breq	.+16     	; 0xb14 <_ZN14SoftwareSerial4peekEv+0x2a>
     b04:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	e3 51       	subi	r30, 0x13	; 19
     b0c:	fd 4f       	sbci	r31, 0xFD	; 253
     b0e:	80 81       	ld	r24, Z
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	08 95       	ret
     b14:	8f ef       	ldi	r24, 0xFF	; 255
     b16:	9f ef       	ldi	r25, 0xFF	; 255
     b18:	08 95       	ret

00000b1a <_ZN14SoftwareSerial9availableEv>:
     b1a:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <_ZN14SoftwareSerial13active_objectE>
     b1e:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <_ZN14SoftwareSerial13active_objectE+0x1>
     b22:	28 17       	cp	r18, r24
     b24:	39 07       	cpc	r19, r25
     b26:	69 f4       	brne	.+26     	; 0xb42 <_ZN14SoftwareSerial9availableEv+0x28>
     b28:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     b2c:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	80 5c       	subi	r24, 0xC0	; 192
     b34:	9f 4f       	sbci	r25, 0xFF	; 255
     b36:	82 1b       	sub	r24, r18
     b38:	91 09       	sbc	r25, r1
     b3a:	60 e4       	ldi	r22, 0x40	; 64
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	b5 c2       	rjmp	.+1386   	; 0x10aa <__divmodhi4>
     b40:	08 95       	ret
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	08 95       	ret

00000b48 <_ZN14SoftwareSerial13stopListeningEv>:
     b48:	e0 91 2d 03 	lds	r30, 0x032D	; 0x80032d <_ZN14SoftwareSerial13active_objectE>
     b4c:	f0 91 2e 03 	lds	r31, 0x032E	; 0x80032e <_ZN14SoftwareSerial13active_objectE+0x1>
     b50:	e8 17       	cp	r30, r24
     b52:	f9 07       	cpc	r31, r25
     b54:	69 f4       	brne	.+26     	; 0xb70 <_ZN14SoftwareSerial13stopListeningEv+0x28>
     b56:	a3 89       	ldd	r26, Z+19	; 0x13
     b58:	b4 89       	ldd	r27, Z+20	; 0x14
     b5a:	9c 91       	ld	r25, X
     b5c:	85 89       	ldd	r24, Z+21	; 0x15
     b5e:	80 95       	com	r24
     b60:	89 23       	and	r24, r25
     b62:	8c 93       	st	X, r24
     b64:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <_ZN14SoftwareSerial13active_objectE+0x1>
     b68:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <_ZN14SoftwareSerial13active_objectE>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	08 95       	ret
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	08 95       	ret

00000b74 <_ZN14SoftwareSerial6listenEv>:
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ec 01       	movw	r28, r24
     b7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b7e:	89 2b       	or	r24, r25
     b80:	e9 f0       	breq	.+58     	; 0xbbc <_ZN14SoftwareSerial6listenEv+0x48>
     b82:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <_ZN14SoftwareSerial13active_objectE>
     b86:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <_ZN14SoftwareSerial13active_objectE+0x1>
     b8a:	c8 17       	cp	r28, r24
     b8c:	d9 07       	cpc	r29, r25
     b8e:	b1 f0       	breq	.+44     	; 0xbbc <_ZN14SoftwareSerial6listenEv+0x48>
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	09 f0       	breq	.+2      	; 0xb96 <_ZN14SoftwareSerial6listenEv+0x22>
     b94:	d9 df       	rcall	.-78     	; 0xb48 <_ZN14SoftwareSerial13stopListeningEv>
     b96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	8e 8f       	std	Y+30, r24	; 0x1e
     b9c:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     ba0:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     ba4:	d0 93 2e 03 	sts	0x032E, r29	; 0x80032e <_ZN14SoftwareSerial13active_objectE+0x1>
     ba8:	c0 93 2d 03 	sts	0x032D, r28	; 0x80032d <_ZN14SoftwareSerial13active_objectE>
     bac:	eb 89       	ldd	r30, Y+19	; 0x13
     bae:	fc 89       	ldd	r31, Y+20	; 0x14
     bb0:	90 81       	ld	r25, Z
     bb2:	8d 89       	ldd	r24, Y+21	; 0x15
     bb4:	89 2b       	or	r24, r25
     bb6:	80 83       	st	Z, r24
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <_ZN14SoftwareSerial6listenEv+0x4a>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <__vector_10>:
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	11 24       	eor	r1, r1
     bce:	0b b6       	in	r0, 0x3b	; 59
     bd0:	0f 92       	push	r0
     bd2:	2f 93       	push	r18
     bd4:	3f 93       	push	r19
     bd6:	4f 93       	push	r20
     bd8:	5f 93       	push	r21
     bda:	6f 93       	push	r22
     bdc:	7f 93       	push	r23
     bde:	8f 93       	push	r24
     be0:	9f 93       	push	r25
     be2:	af 93       	push	r26
     be4:	bf 93       	push	r27
     be6:	ef 93       	push	r30
     be8:	ff 93       	push	r31
     bea:	e0 91 2d 03 	lds	r30, 0x032D	; 0x80032d <_ZN14SoftwareSerial13active_objectE>
     bee:	f0 91 2e 03 	lds	r31, 0x032E	; 0x80032e <_ZN14SoftwareSerial13active_objectE+0x1>
     bf2:	30 97       	sbiw	r30, 0x00	; 0
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <__vector_10+0x34>
     bf6:	51 c0       	rjmp	.+162    	; 0xc9a <__vector_10+0xd6>
     bf8:	96 8d       	ldd	r25, Z+30	; 0x1e
     bfa:	a6 85       	ldd	r26, Z+14	; 0x0e
     bfc:	b7 85       	ldd	r27, Z+15	; 0x0f
     bfe:	85 85       	ldd	r24, Z+13	; 0x0d
     c00:	91 ff       	sbrs	r25, 1
     c02:	04 c0       	rjmp	.+8      	; 0xc0c <__vector_10+0x48>
     c04:	9c 91       	ld	r25, X
     c06:	89 23       	and	r24, r25
     c08:	29 f4       	brne	.+10     	; 0xc14 <__vector_10+0x50>
     c0a:	47 c0       	rjmp	.+142    	; 0xc9a <__vector_10+0xd6>
     c0c:	9c 91       	ld	r25, X
     c0e:	89 23       	and	r24, r25
     c10:	09 f0       	breq	.+2      	; 0xc14 <__vector_10+0x50>
     c12:	43 c0       	rjmp	.+134    	; 0xc9a <__vector_10+0xd6>
     c14:	a3 89       	ldd	r26, Z+19	; 0x13
     c16:	b4 89       	ldd	r27, Z+20	; 0x14
     c18:	9c 91       	ld	r25, X
     c1a:	85 89       	ldd	r24, Z+21	; 0x15
     c1c:	80 95       	com	r24
     c1e:	89 23       	and	r24, r25
     c20:	8c 93       	st	X, r24
     c22:	86 89       	ldd	r24, Z+22	; 0x16
     c24:	97 89       	ldd	r25, Z+23	; 0x17
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <__vector_10+0x62>
     c2a:	60 8d       	ldd	r22, Z+24	; 0x18
     c2c:	71 8d       	ldd	r23, Z+25	; 0x19
     c2e:	a6 85       	ldd	r26, Z+14	; 0x0e
     c30:	b7 85       	ldd	r27, Z+15	; 0x0f
     c32:	55 85       	ldd	r21, Z+13	; 0x0d
     c34:	38 e0       	ldi	r19, 0x08	; 8
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	cb 01       	movw	r24, r22
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <__vector_10+0x76>
     c3e:	82 2f       	mov	r24, r18
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	95 95       	asr	r25
     c44:	87 95       	ror	r24
     c46:	28 2f       	mov	r18, r24
     c48:	4c 91       	ld	r20, X
     c4a:	45 23       	and	r20, r21
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_10+0x8c>
     c4e:	20 68       	ori	r18, 0x80	; 128
     c50:	31 50       	subi	r19, 0x01	; 1
     c52:	91 f7       	brne	.-28     	; 0xc38 <__vector_10+0x74>
     c54:	86 8d       	ldd	r24, Z+30	; 0x1e
     c56:	81 fd       	sbrc	r24, 1
     c58:	20 95       	com	r18
     c5a:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	8f 73       	andi	r24, 0x3F	; 63
     c64:	99 27       	eor	r25, r25
     c66:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     c6a:	38 17       	cp	r19, r24
     c6c:	49 f0       	breq	.+18     	; 0xc80 <__vector_10+0xbc>
     c6e:	a0 91 ec 02 	lds	r26, 0x02EC	; 0x8002ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	a3 51       	subi	r26, 0x13	; 19
     c76:	bd 4f       	sbci	r27, 0xFD	; 253
     c78:	2c 93       	st	X, r18
     c7a:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <__vector_10+0xc2>
     c80:	86 8d       	ldd	r24, Z+30	; 0x1e
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	86 8f       	std	Z+30, r24	; 0x1e
     c86:	82 8d       	ldd	r24, Z+26	; 0x1a
     c88:	93 8d       	ldd	r25, Z+27	; 0x1b
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <__vector_10+0xc6>
     c8e:	a3 89       	ldd	r26, Z+19	; 0x13
     c90:	b4 89       	ldd	r27, Z+20	; 0x14
     c92:	9c 91       	ld	r25, X
     c94:	85 89       	ldd	r24, Z+21	; 0x15
     c96:	89 2b       	or	r24, r25
     c98:	8c 93       	st	X, r24
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0b be       	out	0x3b, r0	; 59
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <_ZN14SoftwareSerialD1Ev>:
     cc0:	26 e1       	ldi	r18, 0x16	; 22
     cc2:	32 e0       	ldi	r19, 0x02	; 2
     cc4:	fc 01       	movw	r30, r24
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
     cca:	3e cf       	rjmp	.-388    	; 0xb48 <_ZN14SoftwareSerial13stopListeningEv>

00000ccc <_ZN14SoftwareSerial5setTXEh>:
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
     cd4:	16 2f       	mov	r17, r22
     cd6:	6e 8d       	ldd	r22, Y+30	; 0x1e
     cd8:	66 95       	lsr	r22
     cda:	61 70       	andi	r22, 0x01	; 1
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	68 27       	eor	r22, r24
     ce0:	81 2f       	mov	r24, r17
     ce2:	b5 d1       	rcall	.+874    	; 0x104e <digitalWrite>
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	81 2f       	mov	r24, r17
     ce8:	76 d1       	rcall	.+748    	; 0xfd6 <pinMode>
     cea:	81 2f       	mov	r24, r17
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	fc 01       	movw	r30, r24
     cf0:	e2 5b       	subi	r30, 0xB2	; 178
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
     cf4:	e4 91       	lpm	r30, Z
     cf6:	e8 8b       	std	Y+16, r30	; 0x10
     cf8:	fc 01       	movw	r30, r24
     cfa:	ec 56       	subi	r30, 0x6C	; 108
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	e4 91       	lpm	r30, Z
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	ec 50       	subi	r30, 0x0C	; 12
     d08:	fe 4f       	sbci	r31, 0xFE	; 254
     d0a:	85 91       	lpm	r24, Z+
     d0c:	94 91       	lpm	r25, Z
     d0e:	9a 8b       	std	Y+18, r25	; 0x12
     d10:	89 8b       	std	Y+17, r24	; 0x11
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	08 95       	ret

00000d1a <_ZN14SoftwareSerial5setRXEh>:
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	ec 01       	movw	r28, r24
     d22:	16 2f       	mov	r17, r22
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	81 2f       	mov	r24, r17
     d28:	56 d1       	rcall	.+684    	; 0xfd6 <pinMode>
     d2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d2c:	81 fd       	sbrc	r24, 1
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <_ZN14SoftwareSerial5setRXEh+0x1c>
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	81 2f       	mov	r24, r17
     d34:	8c d1       	rcall	.+792    	; 0x104e <digitalWrite>
     d36:	1c 87       	std	Y+12, r17	; 0x0c
     d38:	81 2f       	mov	r24, r17
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	fc 01       	movw	r30, r24
     d3e:	e2 5b       	subi	r30, 0xB2	; 178
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	e4 91       	lpm	r30, Z
     d44:	ed 87       	std	Y+13, r30	; 0x0d
     d46:	fc 01       	movw	r30, r24
     d48:	ec 56       	subi	r30, 0x6C	; 108
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	e4 91       	lpm	r30, Z
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	ee 0f       	add	r30, r30
     d52:	ff 1f       	adc	r31, r31
     d54:	e6 52       	subi	r30, 0x26	; 38
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	85 91       	lpm	r24, Z+
     d5a:	94 91       	lpm	r25, Z
     d5c:	9f 87       	std	Y+15, r25	; 0x0f
     d5e:	8e 87       	std	Y+14, r24	; 0x0e
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	08 95       	ret

00000d68 <_ZN14SoftwareSerialC1Ehhb>:
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	ec 01       	movw	r28, r24
     d70:	16 2f       	mov	r17, r22
     d72:	1b 82       	std	Y+3, r1	; 0x03
     d74:	1a 82       	std	Y+2, r1	; 0x02
     d76:	88 ee       	ldi	r24, 0xE8	; 232
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	a0 e0       	ldi	r26, 0x00	; 0
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	8c 83       	std	Y+4, r24	; 0x04
     d80:	9d 83       	std	Y+5, r25	; 0x05
     d82:	ae 83       	std	Y+6, r26	; 0x06
     d84:	bf 83       	std	Y+7, r27	; 0x07
     d86:	86 e1       	ldi	r24, 0x16	; 22
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	99 83       	std	Y+1, r25	; 0x01
     d8c:	88 83       	st	Y, r24
     d8e:	1f 8a       	std	Y+23, r1	; 0x17
     d90:	1e 8a       	std	Y+22, r1	; 0x16
     d92:	19 8e       	std	Y+25, r1	; 0x19
     d94:	18 8e       	std	Y+24, r1	; 0x18
     d96:	1b 8e       	std	Y+27, r1	; 0x1b
     d98:	1a 8e       	std	Y+26, r1	; 0x1a
     d9a:	1d 8e       	std	Y+29, r1	; 0x1d
     d9c:	1c 8e       	std	Y+28, r1	; 0x1c
     d9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     da0:	8e 7f       	andi	r24, 0xFE	; 254
     da2:	20 fb       	bst	r18, 0
     da4:	81 f9       	bld	r24, 1
     da6:	8e 8f       	std	Y+30, r24	; 0x1e
     da8:	64 2f       	mov	r22, r20
     daa:	ce 01       	movw	r24, r28
     dac:	8f df       	rcall	.-226    	; 0xccc <_ZN14SoftwareSerial5setTXEh>
     dae:	61 2f       	mov	r22, r17
     db0:	ce 01       	movw	r24, r28
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	b0 cf       	rjmp	.-160    	; 0xd1a <_ZN14SoftwareSerial5setRXEh>

00000dba <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	ec 01       	movw	r28, r24
     dc0:	9a 01       	movw	r18, r20
     dc2:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     dc4:	1b 8e       	std	Y+27, r1	; 0x1b
     dc6:	1a 8e       	std	Y+26, r1	; 0x1a
     dc8:	19 8e       	std	Y+25, r1	; 0x19
     dca:	18 8e       	std	Y+24, r1	; 0x18
     dcc:	1f 8a       	std	Y+23, r1	; 0x17
     dce:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	79 e0       	ldi	r23, 0x09	; 9
     dd4:	8d e3       	ldi	r24, 0x3D	; 61
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9d d1       	rcall	.+826    	; 0x1114 <__divmodsi4>
     dda:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     ddc:	24 30       	cpi	r18, 0x04	; 4
     dde:	31 05       	cpc	r19, r1
     de0:	18 f0       	brcs	.+6      	; 0xde8 <_ZN14SoftwareSerial5beginEl+0x2e>
    return num - sub;
     de2:	c9 01       	movw	r24, r18
     de4:	03 97       	sbiw	r24, 0x03	; 3
     de6:	02 c0       	rjmp	.+4      	; 0xdec <_ZN14SoftwareSerial5beginEl+0x32>
  else
    return 1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     dec:	9d 8f       	std	Y+29, r25	; 0x1d
     dee:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR((int8_t)_receivePin)) {
     df0:	8c 85       	ldd	r24, Y+12	; 0x0c
     df2:	96 ef       	ldi	r25, 0xF6	; 246
     df4:	98 0f       	add	r25, r24
     df6:	94 30       	cpi	r25, 0x04	; 4
     df8:	48 f0       	brcs	.+18     	; 0xe0c <_ZN14SoftwareSerial5beginEl+0x52>
     dfa:	6e ec       	ldi	r22, 0xCE	; 206
     dfc:	68 0f       	add	r22, r24
     dfe:	64 30       	cpi	r22, 0x04	; 4
     e00:	28 f0       	brcs	.+10     	; 0xe0c <_ZN14SoftwareSerial5beginEl+0x52>
     e02:	62 ec       	ldi	r22, 0xC2	; 194
     e04:	68 0f       	add	r22, r24
     e06:	68 30       	cpi	r22, 0x08	; 8
     e08:	08 f0       	brcs	.+2      	; 0xe0c <_ZN14SoftwareSerial5beginEl+0x52>
     e0a:	84 c0       	rjmp	.+264    	; 0xf14 <_ZN14SoftwareSerial5beginEl+0x15a>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     e0c:	b9 01       	movw	r22, r18
     e0e:	76 95       	lsr	r23
     e10:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     e12:	64 31       	cpi	r22, 0x14	; 20
     e14:	71 05       	cpc	r23, r1
     e16:	18 f0       	brcs	.+6      	; 0xe1e <_ZN14SoftwareSerial5beginEl+0x64>
    return num - sub;
     e18:	63 51       	subi	r22, 0x13	; 19
     e1a:	71 09       	sbc	r23, r1
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <_ZN14SoftwareSerial5beginEl+0x68>
  else
    return 1;
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     e22:	7f 8b       	std	Y+23, r23	; 0x17
     e24:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     e26:	36 97       	sbiw	r30, 0x06	; 6
     e28:	20 f0       	brcs	.+8      	; 0xe32 <_ZN14SoftwareSerial5beginEl+0x78>
    return num - sub;
     e2a:	b9 01       	movw	r22, r18
     e2c:	65 50       	subi	r22, 0x05	; 5
     e2e:	71 09       	sbc	r23, r1
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <_ZN14SoftwareSerial5beginEl+0x7c>
  else
    return 1;
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     e36:	79 8f       	std	Y+25, r23	; 0x19
     e38:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     e3a:	b9 01       	movw	r22, r18
     e3c:	66 0f       	add	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	26 0f       	add	r18, r22
     e42:	37 1f       	adc	r19, r23
     e44:	36 95       	lsr	r19
     e46:	27 95       	ror	r18
     e48:	36 95       	lsr	r19
     e4a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     e4c:	2d 30       	cpi	r18, 0x0D	; 13
     e4e:	31 05       	cpc	r19, r1
     e50:	18 f0       	brcs	.+6      	; 0xe58 <_ZN14SoftwareSerial5beginEl+0x9e>
    return num - sub;
     e52:	2c 50       	subi	r18, 0x0C	; 12
     e54:	31 09       	sbc	r19, r1
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <_ZN14SoftwareSerial5beginEl+0xa2>
  else
    return 1;
     e58:	21 e0       	ldi	r18, 0x01	; 1
     e5a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     e5c:	3b 8f       	std	Y+27, r19	; 0x1b
     e5e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     e60:	94 30       	cpi	r25, 0x04	; 4
     e62:	60 f0       	brcs	.+24     	; 0xe7c <_ZN14SoftwareSerial5beginEl+0xc2>
     e64:	2e ec       	ldi	r18, 0xCE	; 206
     e66:	28 0f       	add	r18, r24
     e68:	24 30       	cpi	r18, 0x04	; 4
     e6a:	40 f0       	brcs	.+16     	; 0xe7c <_ZN14SoftwareSerial5beginEl+0xc2>
     e6c:	22 ec       	ldi	r18, 0xC2	; 194
     e6e:	28 0f       	add	r18, r24
     e70:	28 30       	cpi	r18, 0x08	; 8
     e72:	08 f0       	brcs	.+2      	; 0xe76 <_ZN14SoftwareSerial5beginEl+0xbc>
     e74:	53 c0       	rjmp	.+166    	; 0xf1c <_ZN14SoftwareSerial5beginEl+0x162>
     e76:	a8 e6       	ldi	r26, 0x68	; 104
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	52 c0       	rjmp	.+164    	; 0xf20 <_ZN14SoftwareSerial5beginEl+0x166>
     e7c:	a8 e6       	ldi	r26, 0x68	; 104
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e8 e6       	ldi	r30, 0x68	; 104
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	20 81       	ld	r18, Z
     e86:	94 30       	cpi	r25, 0x04	; 4
     e88:	48 f0       	brcs	.+18     	; 0xe9c <_ZN14SoftwareSerial5beginEl+0xe2>
     e8a:	9e ec       	ldi	r25, 0xCE	; 206
     e8c:	98 0f       	add	r25, r24
     e8e:	94 30       	cpi	r25, 0x04	; 4
     e90:	28 f0       	brcs	.+10     	; 0xe9c <_ZN14SoftwareSerial5beginEl+0xe2>
     e92:	8e 53       	subi	r24, 0x3E	; 62
     e94:	88 30       	cpi	r24, 0x08	; 8
     e96:	10 f4       	brcc	.+4      	; 0xe9c <_ZN14SoftwareSerial5beginEl+0xe2>
     e98:	84 e0       	ldi	r24, 0x04	; 4
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <_ZN14SoftwareSerial5beginEl+0xe4>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	82 2b       	or	r24, r18
     ea0:	8c 93       	st	X, r24
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     ea2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ea4:	96 ef       	ldi	r25, 0xF6	; 246
     ea6:	98 0f       	add	r25, r24
     ea8:	94 30       	cpi	r25, 0x04	; 4
     eaa:	58 f0       	brcs	.+22     	; 0xec2 <_ZN14SoftwareSerial5beginEl+0x108>
     eac:	2e ec       	ldi	r18, 0xCE	; 206
     eae:	28 0f       	add	r18, r24
     eb0:	24 30       	cpi	r18, 0x04	; 4
     eb2:	38 f0       	brcs	.+14     	; 0xec2 <_ZN14SoftwareSerial5beginEl+0x108>
     eb4:	22 ec       	ldi	r18, 0xC2	; 194
     eb6:	28 0f       	add	r18, r24
     eb8:	28 30       	cpi	r18, 0x08	; 8
     eba:	30 f0       	brcs	.+12     	; 0xec8 <_ZN14SoftwareSerial5beginEl+0x10e>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	05 c0       	rjmp	.+10     	; 0xecc <_ZN14SoftwareSerial5beginEl+0x112>
     ec2:	2b e6       	ldi	r18, 0x6B	; 107
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <_ZN14SoftwareSerial5beginEl+0x112>
     ec8:	2d e6       	ldi	r18, 0x6D	; 109
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	3c 8b       	std	Y+20, r19	; 0x14
     ece:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     ed0:	94 30       	cpi	r25, 0x04	; 4
     ed2:	10 f4       	brcc	.+4      	; 0xed8 <_ZN14SoftwareSerial5beginEl+0x11e>
     ed4:	9a ef       	ldi	r25, 0xFA	; 250
     ed6:	0b c0       	rjmp	.+22     	; 0xeee <_ZN14SoftwareSerial5beginEl+0x134>
     ed8:	82 33       	cpi	r24, 0x32	; 50
     eda:	81 f0       	breq	.+32     	; 0xefc <_ZN14SoftwareSerial5beginEl+0x142>
     edc:	83 33       	cpi	r24, 0x33	; 51
     ede:	81 f0       	breq	.+32     	; 0xf00 <_ZN14SoftwareSerial5beginEl+0x146>
     ee0:	84 33       	cpi	r24, 0x34	; 52
     ee2:	81 f0       	breq	.+32     	; 0xf04 <_ZN14SoftwareSerial5beginEl+0x14a>
     ee4:	92 ec       	ldi	r25, 0xC2	; 194
     ee6:	98 0f       	add	r25, r24
     ee8:	98 30       	cpi	r25, 0x08	; 8
     eea:	70 f4       	brcc	.+28     	; 0xf08 <_ZN14SoftwareSerial5beginEl+0x14e>
     eec:	92 ec       	ldi	r25, 0xC2	; 194
     eee:	98 0f       	add	r25, r24
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <_ZN14SoftwareSerial5beginEl+0x13c>
     ef4:	88 0f       	add	r24, r24
     ef6:	9a 95       	dec	r25
     ef8:	ea f7       	brpl	.-6      	; 0xef4 <_ZN14SoftwareSerial5beginEl+0x13a>
     efa:	07 c0       	rjmp	.+14     	; 0xf0a <_ZN14SoftwareSerial5beginEl+0x150>
     efc:	88 e0       	ldi	r24, 0x08	; 8
     efe:	05 c0       	rjmp	.+10     	; 0xf0a <_ZN14SoftwareSerial5beginEl+0x150>
     f00:	84 e0       	ldi	r24, 0x04	; 4
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <_ZN14SoftwareSerial5beginEl+0x150>
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	01 c0       	rjmp	.+2      	; 0xf0a <_ZN14SoftwareSerial5beginEl+0x150>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     f0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f0e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <_ZN14SoftwareSerial5beginEl+0x156>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     f14:	ce 01       	movw	r24, r28
}
     f16:	df 91       	pop	r29
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     f18:	cf 91       	pop	r28
     f1a:	2c ce       	rjmp	.-936    	; 0xb74 <_ZN14SoftwareSerial6listenEv>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     f1c:	a0 e0       	ldi	r26, 0x00	; 0
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	28 30       	cpi	r18, 0x08	; 8
     f22:	08 f4       	brcc	.+2      	; 0xf26 <_ZN14SoftwareSerial5beginEl+0x16c>
     f24:	ad cf       	rjmp	.-166    	; 0xe80 <_ZN14SoftwareSerial5beginEl+0xc6>
     f26:	e0 e0       	ldi	r30, 0x00	; 0
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	ac cf       	rjmp	.-168    	; 0xe84 <_ZN14SoftwareSerial5beginEl+0xca>

00000f2c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	fc 01       	movw	r30, r24
     f30:	31 97       	sbiw	r30, 0x01	; 1
     f32:	e2 31       	cpi	r30, 0x12	; 18
     f34:	f1 05       	cpc	r31, r1
     f36:	08 f0       	brcs	.+2      	; 0xf3a <turnOffPWM+0xe>
     f38:	4d c0       	rjmp	.+154    	; 0xfd4 <turnOffPWM+0xa8>
     f3a:	88 27       	eor	r24, r24
     f3c:	ee 58       	subi	r30, 0x8E	; 142
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	8f 4f       	sbci	r24, 0xFF	; 255
     f42:	04 c1       	rjmp	.+520    	; 0x114c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f44:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     f48:	8f 77       	andi	r24, 0x7F	; 127
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f4c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     f50:	8f 7d       	andi	r24, 0xDF	; 223
     f52:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     f56:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     f58:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     f5c:	87 7f       	andi	r24, 0xF7	; 247
     f5e:	f9 cf       	rjmp	.-14     	; 0xf52 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f60:	84 b5       	in	r24, 0x24	; 36
     f62:	8f 77       	andi	r24, 0x7F	; 127
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f66:	84 b5       	in	r24, 0x24	; 36
     f68:	8f 7d       	andi	r24, 0xDF	; 223
     f6a:	84 bd       	out	0x24, r24	; 36
     f6c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f6e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     f72:	8f 77       	andi	r24, 0x7F	; 127
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f76:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     f7a:	8f 7d       	andi	r24, 0xDF	; 223
     f7c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     f80:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     f82:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     f86:	8f 77       	andi	r24, 0x7F	; 127
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     f8a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     f8e:	8f 7d       	andi	r24, 0xDF	; 223
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     f92:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     f96:	87 7f       	andi	r24, 0xF7	; 247
     f98:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     f9c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     f9e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     fa6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     faa:	8f 7d       	andi	r24, 0xDF	; 223
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     fae:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     fb2:	87 7f       	andi	r24, 0xF7	; 247
     fb4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     fb8:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     fba:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     fbe:	8f 77       	andi	r24, 0x7F	; 127
     fc0:	07 c0       	rjmp	.+14     	; 0xfd0 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     fc2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     fc6:	8f 7d       	andi	r24, 0xDF	; 223
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     fca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     fce:	87 7f       	andi	r24, 0xF7	; 247
     fd0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     fd4:	08 95       	ret

00000fd6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	fc 01       	movw	r30, r24
     fde:	e2 5b       	subi	r30, 0xB2	; 178
     fe0:	fe 4f       	sbci	r31, 0xFE	; 254
     fe2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     fe4:	fc 01       	movw	r30, r24
     fe6:	ec 56       	subi	r30, 0x6C	; 108
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     fec:	88 23       	and	r24, r24
     fee:	61 f1       	breq	.+88     	; 0x1048 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	fc 01       	movw	r30, r24
     ff8:	e2 5f       	subi	r30, 0xF2	; 242
     ffa:	fd 4f       	sbci	r31, 0xFD	; 253
     ffc:	c5 91       	lpm	r28, Z+
     ffe:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1000:	fc 01       	movw	r30, r24
    1002:	ec 50       	subi	r30, 0x0C	; 12
    1004:	fe 4f       	sbci	r31, 0xFE	; 254
    1006:	a5 91       	lpm	r26, Z+
    1008:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    100a:	61 11       	cpse	r22, r1
    100c:	09 c0       	rjmp	.+18     	; 0x1020 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    100e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1010:	f8 94       	cli
		*reg &= ~bit;
    1012:	88 81       	ld	r24, Y
    1014:	20 95       	com	r18
    1016:	82 23       	and	r24, r18
    1018:	88 83       	st	Y, r24
		*out &= ~bit;
    101a:	ec 91       	ld	r30, X
    101c:	2e 23       	and	r18, r30
    101e:	0b c0       	rjmp	.+22     	; 0x1036 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1020:	62 30       	cpi	r22, 0x02	; 2
    1022:	61 f4       	brne	.+24     	; 0x103c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1024:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1026:	f8 94       	cli
		*reg &= ~bit;
    1028:	88 81       	ld	r24, Y
    102a:	32 2f       	mov	r19, r18
    102c:	30 95       	com	r19
    102e:	83 23       	and	r24, r19
    1030:	88 83       	st	Y, r24
		*out |= bit;
    1032:	ec 91       	ld	r30, X
    1034:	2e 2b       	or	r18, r30
    1036:	2c 93       	st	X, r18
		SREG = oldSREG;
    1038:	9f bf       	out	0x3f, r25	; 63
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    103c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    103e:	f8 94       	cli
		*reg |= bit;
    1040:	e8 81       	ld	r30, Y
    1042:	2e 2b       	or	r18, r30
    1044:	28 83       	st	Y, r18
		SREG = oldSREG;
    1046:	8f bf       	out	0x3f, r24	; 63
	}
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	f9 01       	movw	r30, r18
    105a:	e8 5f       	subi	r30, 0xF8	; 248
    105c:	fe 4f       	sbci	r31, 0xFE	; 254
    105e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1060:	f9 01       	movw	r30, r18
    1062:	e2 5b       	subi	r30, 0xB2	; 178
    1064:	fe 4f       	sbci	r31, 0xFE	; 254
    1066:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1068:	f9 01       	movw	r30, r18
    106a:	ec 56       	subi	r30, 0x6C	; 108
    106c:	fe 4f       	sbci	r31, 0xFE	; 254
    106e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1070:	cc 23       	and	r28, r28
    1072:	b9 f0       	breq	.+46     	; 0x10a2 <digitalWrite+0x54>
    1074:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1076:	81 11       	cpse	r24, r1
    1078:	59 df       	rcall	.-334    	; 0xf2c <turnOffPWM>

	out = portOutputRegister(port);
    107a:	ec 2f       	mov	r30, r28
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	ec 50       	subi	r30, 0x0C	; 12
    1084:	fe 4f       	sbci	r31, 0xFE	; 254
    1086:	a5 91       	lpm	r26, Z+
    1088:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    108a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    108c:	f8 94       	cli

	if (val == LOW) {
    108e:	11 11       	cpse	r17, r1
    1090:	04 c0       	rjmp	.+8      	; 0x109a <digitalWrite+0x4c>
		*out &= ~bit;
    1092:	8c 91       	ld	r24, X
    1094:	d0 95       	com	r29
    1096:	d8 23       	and	r29, r24
    1098:	02 c0       	rjmp	.+4      	; 0x109e <digitalWrite+0x50>
	} else {
		*out |= bit;
    109a:	ec 91       	ld	r30, X
    109c:	de 2b       	or	r29, r30
    109e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    10a0:	9f bf       	out	0x3f, r25	; 63
}
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	08 95       	ret

000010aa <__divmodhi4>:
    10aa:	97 fb       	bst	r25, 7
    10ac:	07 2e       	mov	r0, r23
    10ae:	16 f4       	brtc	.+4      	; 0x10b4 <__divmodhi4+0xa>
    10b0:	00 94       	com	r0
    10b2:	06 d0       	rcall	.+12     	; 0x10c0 <__divmodhi4_neg1>
    10b4:	77 fd       	sbrc	r23, 7
    10b6:	08 d0       	rcall	.+16     	; 0x10c8 <__divmodhi4_neg2>
    10b8:	51 d0       	rcall	.+162    	; 0x115c <__udivmodhi4>
    10ba:	07 fc       	sbrc	r0, 7
    10bc:	05 d0       	rcall	.+10     	; 0x10c8 <__divmodhi4_neg2>
    10be:	3e f4       	brtc	.+14     	; 0x10ce <__divmodhi4_exit>

000010c0 <__divmodhi4_neg1>:
    10c0:	90 95       	com	r25
    10c2:	81 95       	neg	r24
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	08 95       	ret

000010c8 <__divmodhi4_neg2>:
    10c8:	70 95       	com	r23
    10ca:	61 95       	neg	r22
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255

000010ce <__divmodhi4_exit>:
    10ce:	08 95       	ret

000010d0 <__udivmodsi4>:
    10d0:	a1 e2       	ldi	r26, 0x21	; 33
    10d2:	1a 2e       	mov	r1, r26
    10d4:	aa 1b       	sub	r26, r26
    10d6:	bb 1b       	sub	r27, r27
    10d8:	fd 01       	movw	r30, r26
    10da:	0d c0       	rjmp	.+26     	; 0x10f6 <__udivmodsi4_ep>

000010dc <__udivmodsi4_loop>:
    10dc:	aa 1f       	adc	r26, r26
    10de:	bb 1f       	adc	r27, r27
    10e0:	ee 1f       	adc	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	a2 17       	cp	r26, r18
    10e6:	b3 07       	cpc	r27, r19
    10e8:	e4 07       	cpc	r30, r20
    10ea:	f5 07       	cpc	r31, r21
    10ec:	20 f0       	brcs	.+8      	; 0x10f6 <__udivmodsi4_ep>
    10ee:	a2 1b       	sub	r26, r18
    10f0:	b3 0b       	sbc	r27, r19
    10f2:	e4 0b       	sbc	r30, r20
    10f4:	f5 0b       	sbc	r31, r21

000010f6 <__udivmodsi4_ep>:
    10f6:	66 1f       	adc	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	1a 94       	dec	r1
    1100:	69 f7       	brne	.-38     	; 0x10dc <__udivmodsi4_loop>
    1102:	60 95       	com	r22
    1104:	70 95       	com	r23
    1106:	80 95       	com	r24
    1108:	90 95       	com	r25
    110a:	9b 01       	movw	r18, r22
    110c:	ac 01       	movw	r20, r24
    110e:	bd 01       	movw	r22, r26
    1110:	cf 01       	movw	r24, r30
    1112:	08 95       	ret

00001114 <__divmodsi4>:
    1114:	05 2e       	mov	r0, r21
    1116:	97 fb       	bst	r25, 7
    1118:	16 f4       	brtc	.+4      	; 0x111e <__divmodsi4+0xa>
    111a:	00 94       	com	r0
    111c:	0f d0       	rcall	.+30     	; 0x113c <__negsi2>
    111e:	57 fd       	sbrc	r21, 7
    1120:	05 d0       	rcall	.+10     	; 0x112c <__divmodsi4_neg2>
    1122:	d6 df       	rcall	.-84     	; 0x10d0 <__udivmodsi4>
    1124:	07 fc       	sbrc	r0, 7
    1126:	02 d0       	rcall	.+4      	; 0x112c <__divmodsi4_neg2>
    1128:	46 f4       	brtc	.+16     	; 0x113a <__divmodsi4_exit>
    112a:	08 c0       	rjmp	.+16     	; 0x113c <__negsi2>

0000112c <__divmodsi4_neg2>:
    112c:	50 95       	com	r21
    112e:	40 95       	com	r20
    1130:	30 95       	com	r19
    1132:	21 95       	neg	r18
    1134:	3f 4f       	sbci	r19, 0xFF	; 255
    1136:	4f 4f       	sbci	r20, 0xFF	; 255
    1138:	5f 4f       	sbci	r21, 0xFF	; 255

0000113a <__divmodsi4_exit>:
    113a:	08 95       	ret

0000113c <__negsi2>:
    113c:	90 95       	com	r25
    113e:	80 95       	com	r24
    1140:	70 95       	com	r23
    1142:	61 95       	neg	r22
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	08 95       	ret

0000114c <__tablejump2__>:
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	88 1f       	adc	r24, r24
    1152:	8b bf       	out	0x3b, r24	; 59
    1154:	07 90       	elpm	r0, Z+
    1156:	f6 91       	elpm	r31, Z
    1158:	e0 2d       	mov	r30, r0
    115a:	19 94       	eijmp

0000115c <__udivmodhi4>:
    115c:	aa 1b       	sub	r26, r26
    115e:	bb 1b       	sub	r27, r27
    1160:	51 e1       	ldi	r21, 0x11	; 17
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <__udivmodhi4_ep>

00001164 <__udivmodhi4_loop>:
    1164:	aa 1f       	adc	r26, r26
    1166:	bb 1f       	adc	r27, r27
    1168:	a6 17       	cp	r26, r22
    116a:	b7 07       	cpc	r27, r23
    116c:	10 f0       	brcs	.+4      	; 0x1172 <__udivmodhi4_ep>
    116e:	a6 1b       	sub	r26, r22
    1170:	b7 0b       	sbc	r27, r23

00001172 <__udivmodhi4_ep>:
    1172:	88 1f       	adc	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	5a 95       	dec	r21
    1178:	a9 f7       	brne	.-22     	; 0x1164 <__udivmodhi4_loop>
    117a:	80 95       	com	r24
    117c:	90 95       	com	r25
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	08 95       	ret

00001184 <__do_global_dtors>:
    1184:	11 e0       	ldi	r17, 0x01	; 1
    1186:	c6 e1       	ldi	r28, 0x16	; 22
    1188:	d1 e0       	ldi	r29, 0x01	; 1
    118a:	00 e0       	ldi	r16, 0x00	; 0
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <__do_global_dtors+0x14>
    118e:	80 2f       	mov	r24, r16
    1190:	fe 01       	movw	r30, r28
    1192:	dc df       	rcall	.-72     	; 0x114c <__tablejump2__>
    1194:	21 96       	adiw	r28, 0x01	; 1
    1196:	01 1d       	adc	r16, r1
    1198:	c7 31       	cpi	r28, 0x17	; 23
    119a:	d1 07       	cpc	r29, r17
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	08 07       	cpc	r16, r24
    11a0:	b1 f7       	brne	.-20     	; 0x118e <__do_global_dtors+0xa>
    11a2:	f8 94       	cli

000011a4 <__stop_program>:
    11a4:	ff cf       	rjmp	.-2      	; 0x11a4 <__stop_program>
